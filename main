#!/usr/bin/env python3

# Michjzuman's Terminal Poker

from datetime import datetime, timedelta

import time
import getpass
import asyncio

import tools
import draw_cards
import find_hands
import intro

user = {}

def poker():
    def shake_hand():
        data = read_file(ACTIVE_FILE)
        table = read_file(TABLE_FILE)
        if not {} in [data, table]:
            players = list(p["name"] for p in table["players"])
            if not user["name"] in players:
                join()
            dif = (datetime.now() - datetime.strptime(data["last"], "%H:%M:%S.%f %d.%m.%Y")).total_seconds()
            if dif > 0.3:
                if data["from"] == user["name"]:
                    if dif > 3:
                        if data["to"] in players:
                            table["players"].remove(table["players"][players.index(data["to"])])
                            table["logs"].append(f"{data['to']} Left  The Table")
                            write_file(TABLE_FILE, table)
                        data["to"] = user["name"]
                        write_file(ACTIVE_FILE, data)

                    if len(table["players"]) > 1:
                        if not table["playing"]:
                            start = (datetime.strptime(table["start-time"], "%H:%M:%S.%f %d.%m.%Y") - datetime.now()).total_seconds()
                            if start <= 0:
                                table["playing"] = True
                                table["turn"] = table["players"][0]["name"]
                                write_file(TABLE_FILE, table)
                    else:
                        if table["playing"]:
                            table["playing"] = False
                            write_file(TABLE_FILE, table)

                if data["to"] == user["name"]:
                    players = list(p["name"] for p in table["players"])
                    data["last"] = datetime.now().strftime("%H:%M:%S.%f %d.%m.%Y")
                    data["from"] = user["name"]
                    data["to"] = players[(players.index(user["name"]) + 1) % len(players)]
                    write_file(ACTIVE_FILE, data)

    def new_round():
        def startDeck():
            res = []
            for kind in ALL_KINDS:
                for num in ALL_NUMS:
                    res.append(kind + num)
            random.shuffle(res)
            return res
        
        deck = startDeck()
        print(TABLE_FILE)
        write_file(TABLE_FILE, {
            "logs": [f"{user['name']} Joined The Table"],
            "public_cards": [],
            "pool": 0,
            "turn": user["name"],
            "bet": 0,
            "playing": False,
            "round": "Pre-Flop",
            "times-raised": 0,
            "start-time": "00:00:00.000000 00.00.0000",
            "players": [
                {
                    "name": user["name"],
                    "money": user["money"],
                    "cards": deck[:2],
                    "in": True,
                    "bet": 0,
                    "all-in": False
                }
            ],
            "deck": deck[2:]
        })
        write_file(ACTIVE_FILE, {
            "last": datetime.now().strftime("%H:%M:%S.%f %d.%m.%Y"),
            "from": user["name"],
            "to": user["name"]
        })
        return data

    def join():
        data = read_file(TABLE_FILE)
        if data != {}:
            if data["playing"]:
                print("Waiting For New Round To Start...")
                data["logs"].append(f"{user['name']} Will Join Next Round")
                write_file(TABLE_FILE, data)
                while data["playing"]:
                    data = read_file(TABLE_FILE)
                    time.sleep(0.1)
            print("Joining...")

            if not user["name"] in list(p["name"] for p in data["players"]):
                data["players"].append({
                    "name": user["name"],
                    "money": user["money"],
                    "cards": data["deck"][:2],
                    "in": True,
                    "bet": 0,
                    "all-in": False
                })
                data["start-time"] = (datetime.now() + timedelta(seconds=20)).strftime("%H:%M:%S.%f %d.%m.%Y")
                data["deck"] = data["deck"][2:]
                data["logs"].append(f"{user['name']} Joined The Table")
                write_file(TABLE_FILE, data)
        else:
            join()
    
    def draw():
        table = read_file(TABLE_FILE)
        if table != {}:
            players = list(p["name"] for p in table["players"])

            lines = ""
            for p in table["players"]:
                icon = f"{RED}>{RESET}" if table["turn"] == p["name"] and table['playing'] else ' '
                color = YELLOW if p['name'] == user['name'] else ''
                name = f"{color}{p['name']}:{RESET}"
                lines += f"| {icon} {name} {GREEN}{p['money']}*{RESET}{' ' * (21 - len(p['name']) - len(str(p['money'])))}|\n"
                lines += "|                           |\n"
            print(f"""+---------------------------+\n|                           |\n{lines}+---------------------------+\n""")

            if table["playing"]:
                print(f"Pool: {GREEN}{table['pool']}*{RESET}")
                print()

                print("Public Cards:")
                draw_cards(table["public_cards"] + (["B"] * (5 - len(table["public_cards"]))))

                print("Your Cards:")
                players = list(p["name"] for p in table["players"])
                draw_cards(table["players"][players.index(user["name"])]["cards"])

            for log in table["logs"][-5:-1]:
                print(f"{GRAY}- {log}{RESET}")
            print(f"- {table['logs'][-1]}")

            print()

            if len(table["players"]) > 1:
                if not table["playing"]:
                    dif = (datetime.strptime(table["start-time"], "%H:%M:%S.%f %d.%m.%Y") - datetime.now()).total_seconds()
                    print(f"The Round Starts In {max(0, round(dif))} Seconds")
            else:
                print(f"Waiting For Other Players...")

            if table["playing"]:
                print(f"Bet: {GREEN}{table['bet']}*{RESET}")
                print()

    def turn():
        table = read_file(TABLE_FILE)
        if table != {}:
            players = list(p["name"] for p in table["players"])
            if table["playing"]:
                if table["turn"] == user["name"]:
                    users = read_file(USERS_FILE)
                    if users != {}:

                        # Check c
                        # Call c

                        # Bet b
                        # Raise r
                        # Re-Raise r

                        # Fold f

                        # All-In a

                        options = []

                        if table["bet"] <= user["money"]:
                            options.append(
                                {
                                    "name": "Check"
                                        if table["bet"] == 0 else "Call",
                                    "when": "c"
                                }
                            )
                        if table["times-raised"] <= 2:
                            options.append(
                                {
                                    "name": "Bet" 
                                        if table["times-raised"] == 0 else ("Raise"
                                        if table["times-raised"] <= 1 else "Re-Raise"),
                                    "when": "number"
                                }
                            )
                        if table["bet"] > 0:
                            options.append(
                                {
                                    "name": "Fold",
                                    "when": "f"
                                }
                            )
                        options.append(
                            {
                                "name": "All-In",
                                "when": "a"
                            }
                        )

                        print(options)

                        if table["turn"] == user["name"]:
                            write_file(TABLE_FILE, table)
                            write_file(USERS_FILE, users)
                else:
                    print(f"Waiting For {table['turn']}...")

    data = read_file(TABLE_FILE)

    dif = (datetime.now() - datetime.strptime(read_file(ACTIVE_FILE)["last"], "%H:%M:%S.%f %d.%m.%Y")).total_seconds()
    if dif < 5:
        join()
    else:
        new_round()
    
    end = False

    async def handshakes():
        while not end:
            shake_hand()
            await asyncio.sleep(0.1)

    async def play():
        nonlocal end
        task = asyncio.create_task(handshakes())

        try:
            while not end:
                clear()
                draw()
                turn()
                await asyncio.sleep(0.1)
        except KeyboardInterrupt:
            end = True
            await task

    asyncio.run(play())

def main():
    #login()

    if terminal_width() >= 58:
        intro()

    clear()
    while True:
        menu("Menu", [
            {
                "title": "Show Stats",
                "key": "s",
                "action": show_stats
            },
            {
                "title": "Join Poker Table",
                "key": "p",
                "action": poker
            }
        ])

if __name__ == "__main__":
    main()
    #login()
    #poker()